

①フレームワーク間で通信を行う時、ゲームデータ長を可変にしている現状だと、ゲームデータのサイズがわからないので、構造体のunionによる仕組みを利用できない。

②キューをレシーブが管理している現状だと、最新情報の取得はデータベースに格納し、マネージャーが知らないデータが存在するかをフラグで管理すれば、共有資源の利用によるバグは発生しない。
だが、ログを取得したいとき、キューを利用することでそれをログとすることができるが、レシーブのスレッドが関係なしに回り続けているため、共有資源の利用によるばぐが発生してしまう。
最新情報の管理と同じようなことをすれば回避できるが、データベースとレシーブの２つでキューを持つことになるので不要なデータを持つことになるのでは

③マネージャーとデータベースをシングルトンにする	アプリケーション上でそもそも１つしか必要ないものはシングルトンにする必要がない